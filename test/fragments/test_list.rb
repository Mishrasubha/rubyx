require_relative 'helper'

class TestList < MiniTest::Test
  include Fragments

  def ttest_list_clas
    @string_input = <<HERE
class Object
end
class List
  def Node.new()
    return 4
  end
  def get(key)
    if( @next )
      return @next.get(key)
    else
      return 0
    end
  end
  def set(key , value)
    if(@next)
      @next.set(key,value)
    else
      @next = Node.new()
      @next.initialize(key,value)
    end
  end
end
class Node < List
  def initialize(key,value)
    @key = key
    @value = value
  end
  def get(key)
    if(@key == key)
      return @value
    else
      return super(key)
    end
  end
  def set(key,value)
    if(@key == key)
      @value = value
    else
      super(key,value)
    end
  end
end
list = List.new()
list.set(1,1)
list.set(2,2)
i = list.get(1)
i.putint()
HERE
    @should = [0x0,0xb0,0xa0,0xe3,0x2a,0x10,0xa0,0xe3,0x13,0x0,0x0,0xeb,0x1,0x70,0xa0,0xe3,0x0,0x0,0x0,0xef,0x0,0x70,0xa0,0xe1,0x0,0x40,0x2d,0xe9,0xa,0x30,0x42,0xe2,0x22,0x21,0x42,0xe0,0x22,0x22,0x82,0xe0,0x22,0x24,0x82,0xe0,0x22,0x28,0x82,0xe0,0xa2,0x21,0xa0,0xe1,0x2,0x41,0x82,0xe0,0x84,0x30,0x53,0xe0,0x1,0x20,0x82,0x52,0xa,0x30,0x83,0x42,0x30,0x30,0x83,0xe2,0x0,0x30,0xc1,0xe5,0x1,0x10,0x41,0xe2,0x0,0x0,0x52,0xe3,0xef,0xff,0xff,0x1b,0x0,0x80,0xbd,0xe8,0x0,0x40,0x2d,0xe9,0x1,0x20,0xa0,0xe1,0x20,0x10,0x8f,0xe2,0x9,0x10,0x81,0xe2,0xe9,0xff,0xff,0xeb,0x14,0x10,0x8f,0xe2,0xc,0x20,0xa0,0xe3,0x1,0x0,0xa0,0xe3,0x4,0x70,0xa0,0xe3,0x0,0x0,0x0,0xef,0x0,0x70,0xa0,0xe1,0x0,0x80,0xbd,0xe8,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20]
    @output = "        42  "
    parse
    @target = [:Word , :plus]
    write "class"
  end

end
