require "thor"
require "rubyx"
require "risc/interpreter"

class RubyXC < Thor
  desc "compile FILE" , "Compile given FILE to binary"
  long_desc <<-LONGDESC
      Very basic cli to compile ruby programs.
      Currently only compile command supported without option.

      Output will be elf object file of the same name, with .o, in root directory.

      Note: Because of Bug #13, you need to run "ld -N file.o" on the file, before
      executing it. This can be done on a mac by installing a cross linker
      (brew install arm-linux-gnueabihf-binutils), or on the target arm machine.
    LONGDESC

  def compile(file)
    begin
      ruby = File.read(file)
    rescue
      fail MalformattedArgumentError , "No such file #{file}"
    end
    puts "compiling #{file}"

    linker = ::RubyX::RubyXCompiler.new({}).ruby_to_binary( ruby , :arm )
    writer = Elf::ObjectWriter.new(linker)

    outfile = file.split("/").last.gsub(".rb" , ".o")
    writer.save outfile
  end

  desc "interpret FILE" , "Interpret given FILE "
  long_desc <<-LONGDESC
      Compiles the given file to an intermediate RISC format, and runs the
      Interpreter.

      RISC is the last abstract layer inside the compiler. It is in nature
      very close to arm (without quirks and much smaller).

      An interpreter was originally developed for the RISC layer for debugging purposes.
      Running the interpreter is about 50k slower than binary, but it can be used
      to veryfy simple programs.

      No output file will be generated, the only output is generated by the
      given program.

      The program must define a main method on the Space class, which will be invoked.
    LONGDESC

  def interpret(file)
    begin
      ruby = File.read(file)
    rescue
      fail MalformattedArgumentError , "No such file #{file}"
    end
    options = {
       parfait:  { factory: 3*1024, },
       load_parfait: false ,
     }
    compiler = RubyX::RubyXCompiler.new(options)
    linker = compiler.ruby_to_binary(ruby, :interpreter)

    puts "interpreting #{file}"

    interpreter = Risc::Interpreter.new(linker , STDOUT )
    interpreter.start_program
    interpreter.tick while(interpreter.instruction)

  end
end
